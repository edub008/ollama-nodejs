import 'whatwg-fetch';
import type { Config, GenerateRequest, PullRequest, PushRequest, CreateRequest, EmbeddingsRequest, GenerateResponse, EmbeddingsResponse, ListResponse, ProgressResponse, StatusResponse, DeleteRequest, CopyRequest, ShowResponse, ShowRequest, ChatRequest, ChatResponse } from './interfaces.js';
export declare class Ollama {
    private readonly config;
    private readonly fetch;
    constructor(config?: Partial<Config>);
    private processStreamableRequest;
    private encodeImage;
    private parseModelfile;
    private resolvePath;
    private fileExists;
    private createBlob;
    generate(request: GenerateRequest & {
        stream: true;
    }): Promise<AsyncGenerator<GenerateResponse>>;
    generate(request: GenerateRequest & {
        stream?: false;
    }): Promise<GenerateResponse>;
    chat(request: ChatRequest & {
        stream: true;
    }): Promise<AsyncGenerator<ChatResponse>>;
    chat(request: ChatRequest & {
        stream?: false;
    }): Promise<ChatResponse>;
    pull(request: PullRequest & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
    pull(request: PullRequest & {
        stream?: false;
    }): Promise<ProgressResponse>;
    push(request: PushRequest & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
    push(request: PushRequest & {
        stream?: false;
    }): Promise<ProgressResponse>;
    create(request: CreateRequest & {
        stream: true;
    }): Promise<AsyncGenerator<ProgressResponse>>;
    create(request: CreateRequest & {
        stream?: false;
    }): Promise<ProgressResponse>;
    delete(request: DeleteRequest): Promise<StatusResponse>;
    copy(request: CopyRequest): Promise<StatusResponse>;
    list(): Promise<ListResponse>;
    show(request: ShowRequest): Promise<ShowResponse>;
    embeddings(request: EmbeddingsRequest): Promise<EmbeddingsResponse>;
}
declare const _default: Ollama;
export default _default;
export * from './interfaces.js';
//# sourceMappingURL=index.d.ts.map