var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import * as utils from './utils.js';
import 'whatwg-fetch';
import fs, { promises, createReadStream } from 'fs';
import { join, resolve, dirname } from 'path';
import { createHash } from 'crypto';
import { homedir } from 'os';
export class Ollama {
    constructor(config) {
        var _a;
        this.config = {
            host: utils.formatHost((_a = config === null || config === void 0 ? void 0 : config.host) !== null && _a !== void 0 ? _a : 'http://127.0.0.1:11434'),
        };
        this.fetch = fetch;
        if ((config === null || config === void 0 ? void 0 : config.fetch) != null) {
            this.fetch = config.fetch;
        }
    }
    processStreamableRequest(endpoint, request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            request.stream = (_a = request.stream) !== null && _a !== void 0 ? _a : false;
            const response = yield utils.post(this.fetch, `${this.config.host}/api/${endpoint}`, Object.assign({}, request));
            if (!response.body) {
                throw new Error('Missing body');
            }
            const itr = utils.parseJSON(response.body);
            if (request.stream) {
                return (function () {
                    return __asyncGenerator(this, arguments, function* () {
                        var _a, e_1, _b, _c;
                        try {
                            for (var _d = true, itr_1 = __asyncValues(itr), itr_1_1; itr_1_1 = yield __await(itr_1.next()), _a = itr_1_1.done, !_a;) {
                                _c = itr_1_1.value;
                                _d = false;
                                try {
                                    const message = _c;
                                    if ('error' in message) {
                                        throw new Error(message.error);
                                    }
                                    yield yield __await(message
                                    // message will be done in the case of chat and generate
                                    // message will be success in the case of a progress response (pull, push, create)
                                    );
                                    // message will be done in the case of chat and generate
                                    // message will be success in the case of a progress response (pull, push, create)
                                    if (message.done || message.status === 'success') {
                                        return yield __await(void 0);
                                    }
                                }
                                finally {
                                    _d = true;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (!_d && !_a && (_b = itr_1.return)) yield __await(_b.call(itr_1));
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        throw new Error('Did not receive done or success response in stream.');
                    });
                })();
            }
            else {
                const message = yield itr.next();
                if (!message.value.done && message.value.status !== 'success') {
                    throw new Error('Expected a completed response.');
                }
                return message.value;
            }
        });
    }
    encodeImage(image) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof image !== 'string') {
                // image is Uint8Array or Buffer, convert it to base64
                const result = Buffer.from(image).toString('base64');
                return result;
            }
            try {
                if (fs.existsSync(image)) {
                    // this is a filepath, read the file and convert it to base64
                    const fileBuffer = yield promises.readFile(resolve(image));
                    return Buffer.from(fileBuffer).toString('base64');
                }
            }
            catch (_a) {
                // continue
            }
            // the string may be base64 encoded
            return image;
        });
    }
    parseModelfile(modelfile, mfDir = process.cwd()) {
        return __awaiter(this, void 0, void 0, function* () {
            const out = [];
            const lines = modelfile.split('\n');
            for (const line of lines) {
                const [command, args] = line.split(' ', 2);
                if (['FROM', 'ADAPTER'].includes(command.toUpperCase())) {
                    const path = this.resolvePath(args.trim(), mfDir);
                    if (yield this.fileExists(path)) {
                        out.push(`${command} @${yield this.createBlob(path)}`);
                    }
                    else {
                        out.push(`${command} ${args}`);
                    }
                }
                else {
                    out.push(line);
                }
            }
            return out.join('\n');
        });
    }
    resolvePath(inputPath, mfDir) {
        if (inputPath.startsWith('~')) {
            return join(homedir(), inputPath.slice(1));
        }
        return resolve(mfDir, inputPath);
    }
    fileExists(path) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield promises.access(path);
                return true;
            }
            catch (_a) {
                return false;
            }
        });
    }
    createBlob(path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof ReadableStream === 'undefined') {
                // Not all fetch implementations support streaming
                // TODO: support non-streaming uploads
                throw new Error('Streaming uploads are not supported in this environment.');
            }
            // Create a stream for reading the file
            const fileStream = createReadStream(path);
            // Compute the SHA256 digest
            const sha256sum = yield new Promise((resolve, reject) => {
                const hash = createHash('sha256');
                fileStream.on('data', (data) => hash.update(data));
                fileStream.on('end', () => resolve(hash.digest('hex')));
                fileStream.on('error', reject);
            });
            const digest = `sha256:${sha256sum}`;
            try {
                yield utils.head(this.fetch, `${this.config.host}/api/blobs/${digest}`);
            }
            catch (e) {
                if (e instanceof Error && e.message.includes('404')) {
                    // Create a new readable stream for the fetch request
                    const readableStream = new ReadableStream({
                        start(controller) {
                            fileStream.on('data', (chunk) => {
                                controller.enqueue(chunk); // Enqueue the chunk directly
                            });
                            fileStream.on('end', () => {
                                controller.close(); // Close the stream when the file ends
                            });
                            fileStream.on('error', (err) => {
                                controller.error(err); // Propagate errors to the stream
                            });
                        },
                    });
                    yield utils.post(this.fetch, `${this.config.host}/api/blobs/${digest}`, readableStream);
                }
                else {
                    throw e;
                }
            }
            return digest;
        });
    }
    generate(request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (request.images) {
                request.images = yield Promise.all(request.images.map(this.encodeImage.bind(this)));
            }
            return this.processStreamableRequest('generate', request);
        });
    }
    chat(request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (request.messages) {
                for (const message of request.messages) {
                    if (message.images) {
                        message.images = yield Promise.all(message.images.map(this.encodeImage.bind(this)));
                    }
                }
            }
            return this.processStreamableRequest('chat', request);
        });
    }
    pull(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processStreamableRequest('pull', {
                name: request.model,
                stream: request.stream,
                insecure: request.insecure,
                username: request.username,
                password: request.password,
            });
        });
    }
    push(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.processStreamableRequest('push', {
                name: request.model,
                stream: request.stream,
                insecure: request.insecure,
                username: request.username,
                password: request.password,
            });
        });
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            let modelfileContent = '';
            if (request.path) {
                modelfileContent = yield promises.readFile(request.path, { encoding: 'utf8' });
                modelfileContent = yield this.parseModelfile(modelfileContent, dirname(request.path));
            }
            else if (request.modelfile) {
                modelfileContent = yield this.parseModelfile(request.modelfile);
            }
            else {
                throw new Error('Must provide either path or modelfile to create a model');
            }
            return this.processStreamableRequest('create', {
                name: request.model,
                stream: request.stream,
                modelfile: modelfileContent,
            });
        });
    }
    delete(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils.del(this.fetch, `${this.config.host}/api/delete`, {
                name: request.model,
            });
            return { status: 'success' };
        });
    }
    copy(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield utils.post(this.fetch, `${this.config.host}/api/copy`, Object.assign({}, request));
            return { status: 'success' };
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.get(this.fetch, `${this.config.host}/api/tags`);
            const listResponse = (yield response.json());
            return listResponse;
        });
    }
    show(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.post(this.fetch, `${this.config.host}/api/show`, Object.assign({}, request));
            const showResponse = (yield response.json());
            return showResponse;
        });
    }
    embeddings(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield utils.post(this.fetch, `${this.config.host}/api/embeddings`, Object.assign({}, request));
            const embeddingsResponse = (yield response.json());
            return embeddingsResponse;
        });
    }
}
export default new Ollama();
// export all types from the main entry point so that packages importing types dont need to specify paths
export * from './interfaces.js';
