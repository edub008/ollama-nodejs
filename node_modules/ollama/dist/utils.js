var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
class ResponseError extends Error {
    constructor(error, status_code) {
        super(error);
        this.error = error;
        this.status_code = status_code;
        this.name = 'ResponseError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ResponseError);
        }
    }
}
const checkOk = (response) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!response.ok) {
        let message = `Error ${response.status}: ${response.statusText}`;
        let errorData = null;
        if ((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')) {
            try {
                errorData = (yield response.json());
                message = errorData.error || message;
            }
            catch (error) {
                console.log('Failed to parse error response as JSON');
            }
        }
        else {
            try {
                console.log('Getting text from response');
                const textResponse = yield response.text();
                message = textResponse || message;
            }
            catch (error) {
                console.log('Failed to get text from error response');
            }
        }
        throw new ResponseError(message, response.status);
    }
});
export const get = (fetch, host) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(host);
    yield checkOk(response);
    return response;
});
export const head = (fetch, host) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(host, {
        method: 'HEAD',
    });
    yield checkOk(response);
    return response;
});
export const post = (fetch, host, data) => __awaiter(void 0, void 0, void 0, function* () {
    const isRecord = (input) => {
        return input !== null && typeof input === 'object' && !Array.isArray(input);
    };
    const formattedData = isRecord(data) ? JSON.stringify(data) : data;
    const response = yield fetch(host, {
        method: 'POST',
        body: formattedData,
    });
    yield checkOk(response);
    return response;
});
export const del = (fetch, host, data) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield fetch(host, {
        method: 'DELETE',
        body: JSON.stringify(data),
    });
    yield checkOk(response);
    return response;
});
export const parseJSON = function (itr) {
    var _a;
    return __asyncGenerator(this, arguments, function* () {
        const decoder = new TextDecoder('utf-8');
        let buffer = '';
        const reader = itr.getReader();
        while (true) {
            const { done, value: chunk } = yield __await(reader.read());
            if (done) {
                break;
            }
            buffer += decoder.decode(chunk);
            const parts = buffer.split('\n');
            buffer = (_a = parts.pop()) !== null && _a !== void 0 ? _a : '';
            for (const part of parts) {
                try {
                    yield yield __await(JSON.parse(part));
                }
                catch (error) {
                    console.warn('invalid json: ', part);
                }
            }
        }
        for (const part of buffer.split('\n').filter((p) => p !== '')) {
            try {
                yield yield __await(JSON.parse(part));
            }
            catch (error) {
                console.warn('invalid json: ', part);
            }
        }
    });
};
export const formatHost = (host) => {
    if (!host) {
        return 'http://127.0.0.1:11434';
    }
    let isExplicitProtocol = host.includes('://');
    if (host.startsWith(':')) {
        // if host starts with ':', prepend the default hostname
        host = `http://127.0.0.1${host}`;
        isExplicitProtocol = false;
    }
    if (!isExplicitProtocol) {
        host = `http://${host}`;
    }
    const url = new URL(host);
    let port = url.port;
    if (!port) {
        if (!isExplicitProtocol) {
            port = '11434';
        }
        else {
            // Assign default ports based on the protocol
            port = url.protocol === 'https:' ? '443' : '80';
        }
    }
    let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;
    // remove trailing slashes
    if (formattedHost.endsWith('/')) {
        formattedHost = formattedHost.slice(0, -1);
    }
    return formattedHost;
};
